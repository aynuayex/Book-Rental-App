// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  password     String
  location     String
  phoneNumber  String
  refreshToken String[]
  approved     Boolean  @default(false)
  role         Role     @default(OWNER)
  wallet       Float   @default(0)
  books        Book[]
  rentals      Rental[]
  monthlyEarnings MonthlyEarnings[]
  // role        Role    @default(CUSTOMER) 
  // roles Roles?
}

enum Role {
  // CUSTOMER
  OWNER
  SYSADMIN
}

model Book {
  id           String   @id @default(uuid())
  book         String
  author       String
  category     Category
  quantity     Float
  price        Float
  approved     Boolean  @default(false)
  rented       Boolean  @default(false)
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  rentals      Rental[]
}

enum Category {
  FICTION
  SELF_HELP
  BUSINESS
}

model Rental {
  id       String   @id @default(uuid())
  book     Book?    @relation(fields: [bookId], references: [id], onDelete: SetNull) // On book deletion, set the bookId to NULL in rentals
  bookId   String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // On user deletion, set the userId to NULL in rentals
  userId   String?
  amount   Float
  rentedAt DateTime @default(now())

  @@unique([bookId, userId]) // Ensures no duplicate entries for the same book and user
}

model MonthlyEarnings {
  id            String   @id @default(uuid())
  year          Int
  month         Int
  totalEarnings Float
  user     User?    @relation(fields: [userId], references: [id]) 
  userId   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, year, month]) // Ensures no duplicate entries for the same month and year
}

// model Roles {
//   id String @id @default(uuid())
//   customer Int @default(2001)
//   owner Int?
//   sysAdmin Int?

//   user User @relation(fields: [userId], references: [id]) 
//   userId String @unique
// }
